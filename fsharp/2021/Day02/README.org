#+title: Day 2: Dive!
#+author: Ellis KenyÅ‘
#+date: 2021-12-02
#+latex_class: chameleon

[[[https://adventofcode.com/2021/day/2][Problem description]]]

* Part One
Slightly more complex than Day 1 (/funny that/), but this is screaming to be
solved using [[https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/active-patterns][Active Patterns]] and [[https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/records][Records]].

First thing we need ,before we even parse the input this time, is to define a
Record to house the Submarine state (this could just be a three element tuple
(threeple?) but I opted for readability)

#+begin_src fsharp
type SubmarinePosition =
    { HorizontalPosition: int
      Depth: int
      Aim: int }
#+end_src

And let's define an Active Pattern to parse the commands (assumptions are made
that anything that isn't a =Forward= or =Down= must be an =Up=, fits the domain but is
technically incorrect)

#+begin_src fsharp
let (|Forward|Down|Up|) (line: string) =
    match line.Split(" ") with
    | [| command; amount |] ->
        if command = "forward" then
            Forward(amount |> int)
        elif command = "down" then
            Down(amount |> int)
        else
            Up(amount |> int)
    | _ -> failwith "Invalid line"
#+end_src

/Now/ we can parse the input (this time we only have to read the lines because
we do the parsing in the pattern)

#+begin_src fsharp
let input =
    System.IO.File.ReadAllLines $"{__SOURCE_DIRECTORY__}/input"
#+end_src

Now the meat of the solution can begin. Both parts can be abstracted with
pluggable bevaviour, so let's create that one first. The crux of the solution is
we take the input, fold some defined calculate method on it and return
horizontal position * depth.

#+begin_src fsharp
let applyInputs calculate input =
    input
    |> Seq.fold
        calculate
        { HorizontalPosition = 0
          Depth = 0
          Aim = 0 }
    |> (fun position -> position.HorizontalPosition * position.Depth)
#+end_src

For part 1, all we need to do is:

- If we have =Forward= then increase horizontal position by the amount
- If we have =Down= then increase depth by that amount
- If we have =Up= then decrease depth by that amount

#+begin_src fsharp
let calculateDepth position command =
    match command with
    | Forward amount -> { position with HorizontalPosition = position.HorizontalPosition + amount }
    | Down amount -> { position with Depth = position.Depth + amount }
    | Up amount -> { position with Depth = position.Depth - amount }
#+end_src

#+html: <details><summary>My answer</summary>2036120</details>

*  Part Two
For part 2, we have to incorporate the Aim field in the calculations thusly:

- If we have =Forward= then increase horizontal position by the amount and depth by aim * the amount
- If we have =Down= then increase aim by that amount
- If we have =Up= then decrease aim by that amount

#+begin_src fsharp
let calculateAim position command =
    match command with
    | Forward amount ->
        { position with
            HorizontalPosition = position.HorizontalPosition + amount
            Depth = position.Depth + position.Aim * amount }
    | Down amount -> { position with Aim = position.Aim + amount }
    | Up amount -> { position with Aim = position.Aim - amount }
#+end_src

#+html: <details><summary>My answer</summary>2015547716/details>
