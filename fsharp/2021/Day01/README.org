#+title: Day 1: Sonar Sweep
#+author: Ellis KenyÅ‘
#+date: 2021-12-02
#+latex_class: chameleon

[[[https://adventofcode.com/2021/day/1][Problem description]]]

* Part One
First, we need to read in the input (usually a good start). No transformation
needed here.

#+begin_src fsharp
let parseInput =
    System.IO.ReadAllLines $"{__SOURCE_DIRECTORY__}/input"
    |> Seq.map int
#+end_src

Next, we need to define a simple predicate to check if a pair of numbers has a
"depth increase" (where the second number is bigger than the first)

#+begin_src fsharp
let hasDepthIncrease pair = fst pair < snd pair
#+end_src

That's all the pieces we need, the rest is just standard library functions:
- =Seq.pairwise= gives us the list in pairs, so a list of =[1;2;3]= becomes =[(1,2); (2,3)]=
- Then we filter out the increases
- And finally count them

#+begin_src fsharp
let part1 input =
    input
    |> Seq.pairwise
    |> Seq.filter hasDepthIncrease
    |> Seq.length
#+end_src

#+html: <details><summary>My answer</summary>1374</details>

* Part Two
Building from part 1, there's nothing to refactor here we can compose nicely.
The only difference between this and day 1 is now we have to use a sliding
window of 3 to sum before. So, let's add that again with more standard
functions:

- =Seq.windowed n= gives us the list grouped into =n= chunks, if there are not enough then ignore the rest (as per the problem description, it just works out nicely for us)
- Then we map sum on the windows to get /that/ total
- And finally pass them back to =part1=

#+begin_src fsharp
let part2 input =
    input
    |> Seq.windowed 3
    |> Seq.map Seq.sum
    |> part1
#+end_src

#+html: <details><summary>My answer</summary>1418</details>
